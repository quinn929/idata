package com.shendeng.datamanager;

import java.io.IOException;
import java.util.Date;
import java.util.HashMap;
import java.util.IdentityHashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.alibaba.fastjson.JSON;
import com.csvreader.CsvReader;
import com.shendeng.utils.Const;
import com.shendeng.utils.DateTool;
import com.shendeng.utils.JedisUtil.Hash;
import com.shendeng.utils.JedisUtil.Keys;
import com.shendeng.utils.JedisUtil.SortSet;
import com.shendeng.utils.RedisUtil;
import com.shendeng.utils.StockUtils;
import com.shendeng.utils.StrTool;
import com.shendeng.utils.SystemConfig;
import com.shendeng.utils.WmcloudUtil;
/**
 * 获取快照数据
 * @see 以线程组的方式，单次执行2秒内
 * @author naxj
 * @date 2016-12-15
 */
public class Level1ManagerV2 {
	private Hash hash = RedisUtil.getJedisUtil().HASH;
	private SortSet sorset = RedisUtil.getJedisUtil().SORTSET;
	private Keys keys = RedisUtil.getJedisUtil().KEYS;
	// 内装所有排序的大包
	Map<String, IdentityHashMap<Double, String>> rank = new HashMap<String, IdentityHashMap<Double, String>>();
	// 涨跌幅额排序
	IdentityHashMap<Double, String> stortChange = new IdentityHashMap<Double, String>();
	// 涨跌幅排序
	IdentityHashMap<Double, String> stortChangePct = new IdentityHashMap<Double, String>();
	// 振幅排序
	IdentityHashMap<Double, String> stortSwing = new IdentityHashMap<Double, String>();
	// 成交量榜
	IdentityHashMap<Double, String> stortVolumnup = new IdentityHashMap<Double, String>();
	// 成交额榜
	IdentityHashMap<Double, String> stortVolumnpriceup = new IdentityHashMap<Double, String>();
	// 换手率榜
	IdentityHashMap<Double, String> stortTurnoverrateup = new IdentityHashMap<Double, String>();
	


	public void refreshData(){
		try {
			getStockIdx();
			Map<String, IdentityHashMap<Double, String>> rank = getAllTickRT();
			if (rank != null && !rank.isEmpty()) {
				if (rank.get("stortChange") != null) {
					sorset.zrem(Const.RKEY_LEVEL1_SORT_change);
					sorset.zadd(Const.RKEY_LEVEL1_SORT_change,
							rank.get("stortChange"));
				}
				if (rank.get("stortChangePct") != null) {
					sorset.zrem(Const.RKEY_LEVEL1_SORT_changePct);
					sorset.zadd(Const.RKEY_LEVEL1_SORT_changePct,
							rank.get("stortChangePct"));
				}
				if (rank.get("stortSwing") != null) {
					sorset.zrem(Const.RKEY_LEVEL1_SORT_swing);
					sorset.zadd(Const.RKEY_LEVEL1_SORT_swing,
							rank.get("stortSwing"));
				}
				if (rank.get("stortVolumnup") != null) {
					sorset.zrem(Const.RKEY_LEVEL1_SORT_volumnup);
					sorset.zadd(Const.RKEY_LEVEL1_SORT_volumnup,
							rank.get("stortVolumnup"));
				}
				if (rank.get("stortVolumnpriceup") != null) {
					sorset.zrem(Const.RKEY_LEVEL1_SORT_volumnpriceup);
					sorset.zadd(Const.RKEY_LEVEL1_SORT_volumnpriceup,
							rank.get("stortVolumnpriceup"));
				}
				if (rank.get("stortTurnoverrateup") != null) {
					sorset.zrem(Const.RKEY_LEVEL1_SORT_turnoverrateup);
					sorset.zadd(Const.RKEY_LEVEL1_SORT_turnoverrateup,
							rank.get("stortTurnoverrateup"));
				}
			}
		} catch (Exception e) {
			new Exception("下载股票数据快照"
					+ DateTool.DateToStr(new Date(), DateTool.TIME_FORMAT))
					.printStackTrace();
			e.printStackTrace();
		}
	}
	/**
	 * 获取指数快照
	 * 
	 * @param priceMap
	 *            行情快照redis Key
	 * @throws IOException
	 */
	public void getStockIdx() throws IOException {
		String allIdx = SystemConfig.getSysVal("idx.code");
		CsvReader readerIdx = WmcloudUtil
				.url2csvWithGzip(Const.UW_LEVEL1_CSV + "?securityID=" + allIdx + "&assetClass=IDX&exchangeCD=");
		if (readerIdx != null) {
			readerIdx.readRecord();
			while (readerIdx.readRecord()) {
				String[] items = readerIdx.getValues();
				String simpleCode = StockUtils.getLTCode(items[0]) + items[1];
				items = StockUtils.arrayAddLength(items, 3);
				items[Const.PRICE_assetClass] = "IDX";
				items[Const.PRICE_industryID1] = "";
				items[Const.PRICE_industryName1] = "";
				hash.hset(Const.RKEY_LEVEL1_, simpleCode, JSON.toJSONString(items));
			}
			readerIdx.close();
		}
	}
	/**
	 * 获取所有A股股票快照
	 * @return
	 */
	public Map<String, IdentityHashMap<Double, String>> getAllTickRT() {
		long begin = System.currentTimeMillis();
		//将所有A股股票编码 按每组300进行分组
		List<List<String>> codes = Cache.getStockCodeSplit(300);
		//线程组
		ThreadGroup threadGroup = new ThreadGroup("SubSnapshotTask");
		int i=0;
		//将所有股票编码分成几组，并使用子线程去处理数据
		for(List<String> subCodes:codes){
			String threadName = "SubSnapshotTask-"+(++i)+"-"+System.currentTimeMillis();
			SubSnapshotTask subSnapshotTask = new SubSnapshotTask(subCodes);
			Thread thred = new Thread(threadGroup, subSnapshotTask,threadName);
            thred.start();
		}
		//等待所有子线程完成
		while(threadGroup.activeCount()>0){
//			System.out.println(threadGroup.activeCount());
			//如果20秒还没有执行完所有线程
			if ((System.currentTimeMillis()-begin)>(1000*20)){
				//尝试结束所有子线程
				threadGroup.interrupt();
			}
		}
		threadGroup.interrupt();
		threadGroup.destroy();
		rank.put("stortChange", stortChange);
		rank.put("stortChangePct", stortChangePct);
		rank.put("stortSwing", stortSwing);
		rank.put("stortVolumnup", stortVolumnup);
		rank.put("stortVolumnpriceup", stortVolumnpriceup);
		rank.put("stortTurnoverrateup", stortTurnoverrateup);
		return this.rank;
	}
	/**
	 * 获取指定股票的快照
	 * @param codes
	 * @throws Exception 
	 */
	public void getTickRT(List<String> codes) throws Exception {
		long begin1 = System.currentTimeMillis();
		String codeStr = StringUtils.join(codes, ",");
		//从通联获取数据
		CsvReader readerHs = WmcloudUtil.url2csvWithGzip(Const.UW_LEVEL1_CSV + "?ticker=" + codeStr);
		if (readerHs != null) {
			try {
				readerHs.readRecord();
				while (readerHs.readRecord()) {
					String[] items = readerHs.getValues();
					//处理单只股票
					processOneStock(items);
				}
			} catch (Exception ex) {
				System.err.println(ex);
				throw ex;
			} finally {
				//关闭流
				readerHs.close();
			}
		}
//		System.out.println("securityID=&assetClass=E&exchangeCD=XSHE:" + (System.currentTimeMillis() - begin1));
	}
	/**
	 * 处理单只股票 csv转map
	 * 
	 * @param items
	 */
	private void processOneStock(String[] items) {
		String simpleCode = StockUtils.getLTCode(items[0]) + items[1];
		items = StockUtils.arrayAddLength(items, 3);
		items[Const.PRICE_assetClass] = "";//XSHE
		items[Const.PRICE_industryID1] = "";
		items[Const.PRICE_industryName1] = "";
		// 保存全部信息
		hash.hset(Const.RKEY_LEVEL1_, simpleCode, JSON.toJSONString(items));
		// 保存涨跌幅额排序
		String[] sortChangeItem = new String[] { simpleCode, items[Const.PRICE_lastPrice],
				items[Const.PRICE_change] };
		String change = StrTool.zero2decimal(items[Const.PRICE_change]);
		stortChange.put(Double.parseDouble(change), JSON.toJSONString(sortChangeItem));
		// 保存涨跌幅排序
		String[] sortChangePctItem = new String[] { simpleCode, items[Const.PRICE_lastPrice],
				items[Const.PRICE_changePct] };
		String changePct = StrTool.zero2decimal(items[Const.PRICE_changePct]);
		stortChangePct.put(Double.parseDouble(changePct), JSON.toJSONString(sortChangePctItem));
		// 保存振幅排序
		String[] sortAmplitudeItem = new String[] { simpleCode, items[Const.PRICE_lastPrice],
				items[Const.PRICE_amplitude] };
		String amplitude = StrTool.zero2decimal(items[Const.PRICE_amplitude]);
		stortSwing.put(Double.parseDouble(amplitude), JSON.toJSONString(sortAmplitudeItem));

		// 成交量榜
		String[] sortVolumeItem = new String[] { simpleCode, items[Const.PRICE_lastPrice],
				items[Const.PRICE_volume] };
		String volume = StrTool.zero2decimal(items[Const.PRICE_volume]);
		stortVolumnup.put(Double.parseDouble(volume), JSON.toJSONString(sortVolumeItem));

		// 成交额榜
		String[] sortValueItem = new String[] { simpleCode, items[Const.PRICE_lastPrice],
				items[Const.PRICE_value] };
		String value = StrTool.zero2decimal(items[Const.PRICE_value]);
		stortVolumnpriceup.put(Double.parseDouble(value), JSON.toJSONString(sortValueItem));

		// 换手率榜
		String[] sortTurnoverRateItem = new String[] { simpleCode, items[Const.PRICE_lastPrice],
				items[Const.PRICE_turnoverRate] };
		String turnoverRate = StrTool.zero2decimal(items[Const.PRICE_turnoverRate]);
		stortTurnoverrateup.put(Double.parseDouble(turnoverRate), JSON.toJSONString(sortTurnoverRateItem));
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}
	/**
	 * 获取并处理快照信息的子线程
	 * @author naxj
	 *
	 */
	class SubSnapshotTask implements Runnable {
		//子线程处理的投票
		private List<String> codes;
		public SubSnapshotTask(List<String> codes){
			this.codes = codes;
		}
		@Override
		public void run() {
			try {
//				System.out.println(Thread.currentThread().getName()+":run");
				long begin = System.currentTimeMillis();
				getTickRT(this.codes);
//				System.out.println(Thread.currentThread().getName()+":"+(System.currentTimeMillis()-begin));
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}  

	}
}

